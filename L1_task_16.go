// Реализовать быструю сортировку массива (quicksort) встроенными методами языка


//Быстрая сортировка заключается в сведении функции к базовому случаю в виде массива из одного элемента за счет рекурсии
//Сначала определяется опорный элемент, это может быть первый элемент массива
//Далее все элементы сортируются на 2 слайса, элементы меньше опорного эементы и элементы больше опорного элемента
//
package main

import (
	"fmt"
)

func qSort(slice []int) []int {
	//определяем базовый случай, когда слайс состоит из 1 элемента
	if len(slice) < 2 {
		return slice
	} else {
		//находим опорный элемент
		pivot := slice[0]
		//создаем 2 слайса, в который будем записывать элементы меньше опорного и больше опорного
		less := make([]int, 0)
		greater := make([]int, 0)
		//пробегаемся по слайсу и раскидываем элменты на 2 новых слайса
		for _, val := range slice[1:] {
			if val < pivot {
				less = append(less, val) // слайс из меньших элементов
			} else {
				greater = append(greater, val) // слайс из больших элементов
			}
		}
		//далее снова проходим рекурсией по слайсу из меньших и больших элементов пока не достигнем базового случая из одного элемента
		less = append(qSort(less), pivot)
		greater = qSort(greater)
		return append(less, greater...)
	}
}

func main() {
	testArray := []int{10, 5, 20, 1, 6, 15, 20, 3, 1}
	
	fmt.Println("Неотсортированный массив: ", testArray)
	sorted := qSort(testArray)
	fmt.Println("Отсортированный массив:", sorted)
}
