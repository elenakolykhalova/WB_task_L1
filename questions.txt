1. Какой самый эффективный способ конкатенации строк?
	1. string.Builder() - Лучший, по мнению гугла
	2. bytes.Buffer{}; 
       buffer.WriteString(arg)
	3. copy() Считываем кол-во новой строки, создаем срез нужной длины, функцией Copy докидываем символы байты
	4. string.Join(args, "")
    5. str += str1 

__________________________________________________________________________________
2. Что такое интерфейсы, как они применяются в Go?

Интерфейс — это набор методов, представляющих стандартное поведение для различных типов данных. 
С помощью интерфейсов можно организовывать разные группы методов, применяемых к разным объектам.

Нужен для того, чтобы то, что крякает, летает и плавает называть уткой.
Пустой интерфейс полезен, когда мы не знаем, что закинут в аргумент функции.
Пустой интерфейс принимает все, а дальше, мы switch a.(type) case int... в зависимости от типа - выбираем действия (полиморфизм)

__________________________________________________________________________________
3. Чем отличаются RWMutex от Mutex?

Стандартный Mutex блокирует и чтение и запись (Lock ~70ns Unlock ~50ns)
RWMutex есть RLock который блокирует чтение, работает быстрее обычного Mutex 
Если много конкурентного чтения - RWMutex. 
На чтение можно вызвать множество блокировок RLock() (Rlock + Unlock 13 ns) НО на запись Lock-Unluck 300 ns
Хороший пример - чтение из кеша (map): Делаем Rlock перед чтением и пока мы не сделали RUnlock другие горутины не могут сделаь Lock (на запись). Но RLock доступен
Если конкурентной записи - Mutex (Lock + Unlock)

RWMutex нужен, когда у нас есть объект, который нельзя параллельно писать, но можно параллельно читать. 
Например, стандартный тип map.
Перед записью в защищаемый мьютексом объект делается .Lock(), 
а вызовы .Lock() и .RLock() в других горутинах будут ждать, пока вы не отпустите мьютекс через .Unlock().
Перед чтением защищаемого объекта делается .RLock() и только вызовы .Lock() в других горутинах блокируются, 
вызовы .RLock() спокойно проходят. 
Когда отпускаете мьютекс через .RUnlock(), ждущие вызовы .Lock() по-очереди могут забирать мьютекс на себя.
Таких образом обеспечивается параллельное чтение объекта несколькими горутинами, что улучшает производительность.

Mutex - это структура с двумя полями:
type Mutex struct {
    state int32  - "статус" мьютекса (захвачен/свободен/голодает)
    sema  uint32 - используется в "режиме голодания"
}
RWMutex - структура, содержащая Mutex как одно из полей:
type RWMutex struct {
    w           Mutex  - блокируется, если есть ожидающие "писатели"
    writerSem   uint32 - семафор для писателей, чтобы они дождались завершения работы "читателями"
    readerSem   uint32 - семафор для читателей, чтобы они дождались завершения работы "писателями"
    readerCount int32  - количество ожидающих читателей
    readerWait  int32  - количество ожидающих писателей
}


RWMutex по сравнению с Mutex содержит больше методов:
    Mutex: Lock(), Unlock(), TryLock();
    RWMutex: Lock(), Unlock(), TryLock(), RLock(), RUnlock(), TryRLock().

Дополнительные методы с префиксом 'R' позволяют сократить количество блокировок
и за счёт этого повысить общую производительность программы.
При вызове RLock() одновременный доступ к критической секции (КС) доступен
для всех горутин, удерживающих данную блокировку.
В случае с Lock() доступ к КС разрешён только одной горутине. Следующая горутина
получит доступ к КС только после того, как предыдущая снимет блокировку.
Для операций чтения, не изменяющих данные, такая блокировка избыточна.

https://cs.opensource.google/go/go/+/refs/tags/go1.18.2:src/sync/mutex.go
https://cs.opensource.google/go/go/+/refs/tags/go1.18.2:src/sync/rwmutex.go

__________________________________________________________________________________
4. Чем отличаются буферизированные и не буферизированные каналы?

Буферизированные каналы, как следует из названия, содержат буфер.
Запись в канал с буфером происходит моментально до тех пор, пока буфер не заполнен.
При заполненном буфере запись в канал блокируется до тех пор, пока кто-либо
не прочитает из канала, тем самым освободив место в буфере.
Использование буферизированных каналов предпочтительнее, если размер данных,
передаваемых через канал, заранее известен.

__________________________________________________________________________________
5. Какой размер у структуры struct{}{}?
    0

__________________________________________________________________________________
6. Есть ли в Go перегрузка методов или операторов?
	Нет - во благо удобочитаемости

__________________________________________________________________________________
7. В какой последовательности будут выведены элементы map[int]int?
Пример: 
m[0]=1 
m[1]=124 
m[2]=281

В случайном. Мапа - неупорядоченная структура данных

__________________________________________________________________________________
8. В чем разница между make и new?
	make - для слайсов, мап и каналов 
        (Инициализирует) возвращает указатель на мапу, слайс или канал. 
        (Эти типы содержат ссылку на что-то, если их впихнуть в new() то получим nil как адрес)
	new - для всего остального (Обнуляет память) возвращает указатель на объект с нулевыми значениями

__________________________________________________________________________________
9. Сколько существует способов задать переменную типа slice или map?
	map := make(map[int]int); 
    a := map[int]int{1:1}

	var slice []int; 
    slice := []int{123}

__________________________________________________________________________________
10. Что выведет программа? Ответ: 1 1

    func update(p *int) { // надо передавать указатель на указатель (p **int)
        b := 2
        p = &b  // *p = &b
    }

    func main() { 
        var (
            a = 1
            p = &a 
        )
        fmt.Println(*p) 
        update(p)   // update(&p)
        fmt.Println(*p)
    }

__________________________________________________________________________________
11. Что выведет данная программа и почему? Будет дедлок

    func main() {
        wg := sync.WaitGroup{} 
        for i := 0; i < 5; i++ {
            wg.Add(1)
            go func(wg sync.WaitGroup, i int) { // wg передавать по указателю
                fmt.Println(i)
                wg.Done() 
            }(wg, i) // (&wg, i)
            }
        wg.Wait() 
        fmt.Println("exit")
    }

__________________________________________________________________________________
12.  Что выведет данная программа и почему? Ответ: 0. Внутри If создали свою переменную n и ее изменяли.

    func main() {
        n := 0
        if true {
            n := 1
            n++ 
        }
        fmt.Println(n) 
    }

__________________________________________________________________________________
13. Что выведет данная программа и почему? Ответ: [100 2 3 4 5]

    func someAction(v []int8, b int8) {
        v[0] = 100           // изменение сработало так как слайс - это уже ссылка
        v = append(v, b)     // а тут создался новый массив, в него все перезаписалось, добавилось b,
                             // Но мейновский слайс остался таким же.
	                         // Можно менять содержимое массива слайса, но не заголовок слайса (если не по поинтеру передавать)
    }

    func main() {
        var a = []int8 {1, 2, 3, 4, 5} 
        someAction(a, 6) 
        fmt.Println(a)
    }

__________________________________________________________________________________
14. Что выведет программа и почему? Ответ: [b b a][a a]

    func main() {
        slice := []string {"a", "a"} 
        func(slice []string) {
            slice = append(slice, "a") // здесь уже заголовок слайса не равен внешнему, так как пересоздался новый слайс
            slice[0] = "b"             // изменение элемента в новом слайсе, который был создан строкой выше
            slice[1] = "b"             // изменение элемента в новом слайсе, который был создан строкой выше
            fmt.Print(slice)
        }(slice)
        fmt.Print(slice) // печать изначального слайса
    }














